// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	stdlog "github.com/robowealth-mutual-fund/stdlog"
	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

// Str provides a mock function with given fields: key, val
func (_m *Context) Str(key string, val string) stdlog.Context {
	ret := _m.Called(key, val)

	var r0 stdlog.Context
	if rf, ok := ret.Get(0).(func(string, string) stdlog.Context); ok {
		r0 = rf(key, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Context)
		}
	}

	return r0
}

// Timestamp provides a mock function with given fields:
func (_m *Context) Timestamp() stdlog.Context {
	ret := _m.Called()

	var r0 stdlog.Context
	if rf, ok := ret.Get(0).(func() stdlog.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Context)
		}
	}

	return r0
}

type mockConstructorTestingTNewContext interface {
	mock.TestingT
	Cleanup(func())
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContext(t mockConstructorTestingTNewContext) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
