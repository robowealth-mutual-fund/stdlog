// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	error "github.com/robowealth-mutual-fund/stdlog/constant/errors"
	mock "github.com/stretchr/testify/mock"

	stdlog "github.com/robowealth-mutual-fund/stdlog"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

// Err provides a mock function with given fields: errCode
func (_m *Event) Err(errCode error.Interface) stdlog.Event {
	ret := _m.Called(errCode)

	var r0 stdlog.Event
	if rf, ok := ret.Get(0).(func(error.Interface) stdlog.Event); ok {
		r0 = rf(errCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Event)
		}
	}

	return r0
}

// Errs provides a mock function with given fields: key, errs
func (_m *Event) Errs(key string, errs []error.Interface) stdlog.Event {
	ret := _m.Called(key, errs)

	var r0 stdlog.Event
	if rf, ok := ret.Get(0).(func(string, []error.Interface) stdlog.Event); ok {
		r0 = rf(key, errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Event)
		}
	}

	return r0
}

// Interface provides a mock function with given fields: key, v
func (_m *Event) Interface(key string, v ...interface{}) stdlog.Event {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, v...)
	ret := _m.Called(_ca...)

	var r0 stdlog.Event
	if rf, ok := ret.Get(0).(func(string, ...interface{}) stdlog.Event); ok {
		r0 = rf(key, v...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Event)
		}
	}

	return r0
}

// Msg provides a mock function with given fields: msg
func (_m *Event) Msg(msg string) {
	_m.Called(msg)
}

// Msgf provides a mock function with given fields: format, v
func (_m *Event) Msgf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Str provides a mock function with given fields: key, val
func (_m *Event) Str(key string, val string) stdlog.Event {
	ret := _m.Called(key, val)

	var r0 stdlog.Event
	if rf, ok := ret.Get(0).(func(string, string) stdlog.Event); ok {
		r0 = rf(key, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Event)
		}
	}

	return r0
}

// Strs provides a mock function with given fields: key, vals
func (_m *Event) Strs(key string, vals []string) stdlog.Event {
	ret := _m.Called(key, vals)

	var r0 stdlog.Event
	if rf, ok := ret.Get(0).(func(string, []string) stdlog.Event); ok {
		r0 = rf(key, vals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stdlog.Event)
		}
	}

	return r0
}

type mockConstructorTestingTNewEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvent(t mockConstructorTestingTNewEvent) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
